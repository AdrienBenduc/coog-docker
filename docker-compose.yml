version: '3'

networks:
  frontend:
    driver: bridge
  backend:

services:
  reverse-proxy:
    image: traefik:2.2.1
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./certs:/etc/certs:rw
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ./traefik/traefik.toml:/etc/traefik/traefik.toml:ro
      - ./traefik/traefik.config.toml:/etc/traefik/traefik.config.toml:ro
      - ./traefik/acme.json:/acme.json:rw
    labels:
      - traefik.frontend.redirect.entryPoint=https
    networks:
      - backend
      - frontend

  flower:
    image: mher/flower:latest
    command: ["--basic_auth=${FLOWER_PASSWORD}:${FLOWER_PASSWORD}", "--url-prefix=flower" ]
    depends_on:
      - reverse-proxy
      - celery
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
    labels:
      - traefik.http.routers.flower.rule=Host(`${COOG_HOSTNAME}`) && PathPrefix(`/flower`)
      - traefik.http.routers.flower.entrypoints=http
      - traefik.http.routers.flower.middlewares=flower
      - traefik.http.middlewares.flower.replacepathregex.regex=/flower(/|$$)(.*)
      - traefik.http.middlewares.flower.replacepathregex.replacement=/$${2}
      - traefik.http.routers.flower.middlewares=redirect@file
      - traefik.http.routers.flower_s.rule=Host(`${COOG_HOSTNAME}`) && PathPrefix(`/flower`)
      - traefik.http.routers.flower_s.middlewares=flower_s
      - traefik.http.middlewares.flower_s.replacepathregex.regex=/flower(/|$$)(.*)
      - traefik.http.middlewares.flower_s.replacepathregex.replacement=/$${2}
      - traefik.http.routers.flower_s.entrypoints=https
      - traefik.http.routers.flower_s.tls=true
    networks:
      - backend
      - frontend

  coog:
    image: coopengo/coog:${IMAGE_VERSION_COOG}
    command: ["server", "1"]
    env_file:
      - env_files/var.env
    depends_on:
      - initcoog
    labels:
      - traefik.http.routers.coog.rule=Host(`${COOG_HOSTNAME}`)
      - traefik.http.routers.coog.entrypoints=http
      - traefik.http.routers.coog.middlewares=redirect@file
      - traefik.http.routers.coog_s.rule=Host(`${COOG_HOSTNAME}`)
      - traefik.http.routers.coog_s.entrypoints=https
      - traefik.http.routers.coog_s.tls=true
      - traefik.http.routers.coog_s.tls.certresolver=letsencrypt
    volumes:
      - ${COOG_VOLUME}:/workspace/io
      - ./conf/coog.conf:/workspace/coog.conf:ro
      - ./conf/batch.conf:/workspace/batch.conf:ro
    networks:
      - backend

  initcoog:
    image: coopengo/coog:${IMAGE_VERSION_COOG}
    command: ["admin", "-u", "ir", "res", "-d", "${COOG_DB_NAME}"]
    env_file:
      - env_files/var.env
    networks:
      - backend
    volumes:
      - ./conf/coog.conf:/workspace/coog.conf:ro
      - ./conf/batch.conf:/workspace/batch.conf:ro

  celery:
    image: coopengo/coog:${IMAGE_VERSION_COOG}
    command: ["celery", "1"]
    env_file:
      - env_files/var.env
      - env_files/celery.env
    networks:
      - backend
    volumes:
      - ./conf/coog.conf:/workspace/coog.conf:ro
      - ./conf/batch.conf:/workspace/batch.conf:ro

  celery_single:
    image: coopengo/coog:${IMAGE_VERSION_COOG}
    command: ["celery_single"]
    env_file:
      - env_files/var.env
      - env_files/celery_single.env
    networks:
      - backend
    volumes:
      - ./conf/coog.conf:/workspace/coog.conf:ro
      - ./conf/batch.conf:/workspace/batch.conf:ro

  postgres:
    image: postgres:12-alpine
    env_file:
      - env_files/postgres.env
    volumes:
      - ${POSTGRES_DATA_VOLUME}:/var/lib/postgresql/data
      #- ./postgres/init-user-db.sh:/docker-entrypoint-initdb.d/1_init-user-db.sh
      - ./postgres/dumps/${POSTGRES_DUMP}:/docker-entrypoint-initdb.d/2_coog27.sql:ro
    networks:
      - backend

  redis:
    image: redis:5.0.7-alpine
    env_file:
      - env_files/redis.env
    networks:
      - backend

  mongo:
    image: mongo
    env_file:
      - env_files/var.env
    volumes:
      - ./mongo/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - backend

  gateway:
    image: coopengo/gateway:${IMAGE_VERSION_GATEWAY}
    env_file:
      - env_files/var.env
    depends_on:
      - mongo
    labels:
      - traefik.http.routers.gateway.rule=Host(`${COOG_HOSTNAME}`) && PathPrefix(`/gateway`)
      - traefik.http.routers.gateway.entrypoints=http
      - traefik.http.routers.gateway.middlewares=gateway
      - traefik.http.middlewares.gateway.replacepathregex.regex=/gateway(/|$$)(.*)
      - traefik.http.middlewares.gateway.replacepathregex.replacement=/$${2}
      - traefik.http.routers.gateway.middlewares=redirect@file
      - traefik.http.routers.gateway_s.rule=Host(`${COOG_HOSTNAME}`) && PathPrefix(`/gateway`)
      - traefik.http.routers.gateway_s.middlewares=gateway_s
      - traefik.http.middlewares.gateway_s.replacepathregex.regex=/gateway(/|$$)(.*)
      - traefik.http.middlewares.gateway_s.replacepathregex.replacement=/$${2}
      - traefik.http.routers.gateway_s.entrypoints=https
      - traefik.http.routers.gateway_s.tls=true
    networks:
      - backend
      - frontend

  api:
    image: coopengo/api:${IMAGE_VERSION_API}
    env_file:
      - env_files/var.env
    depends_on:
      - mongo
    networks:
      - backend

  api-b2b-config:
    image: coopengo/api-b2b-config:${IMAGE_VERSION_API_B2B_CONFIG}
    env_file:
      - env_files/var.env
    depends_on:
      - mongo
    networks:
      - backend

  api-referential:
    image: coopengo/api-referential:${IMAGE_VERSION_API_REFERENTIAL}
    env_file:
      - env_files/var.env
    depends_on:
      - mongo
    networks:
      - backend

  api-identity-manager:
    image: coopengo/api-identity-manager:${IMAGE_VERSION_API_IDENTITY_MANAGER}
    env_file:
      - env_files/var.env
    depends_on:
      - mongo
      - api
    networks:
      - backend

  # app-b2c:
  #   image: coopengo/app-b2c:${IMAGE_VERSION_APP_B2C}
  #   env_file:
  #     - env_files/var.env
  #   depends_on:
  #     - mongo
  #     - api
  #   networks:
  #     - backend

  web:
    image: coopengo/web:${IMAGE_VERSION_WEB}
    env_file:
      - env_files/var.env
    command: ["server", "1"]
    depends_on:
      - redis
    networks:
      - backend

  portal:
    image: coopengo/portal:${IMAGE_VERSION_PORTAL}
    command: ["server", "1"]
    env_file:
      - env_files/var.env
    labels:
      - traefik.http.routers.portal.rule=Host(`${COOG_HOSTNAME}`) && PathPrefix(`/portal`)
      - traefik.http.routers.portal.entrypoints=http
      - traefik.http.routers.portal.middlewares=portal
      - traefik.http.middlewares.portal.replacepathregex.regex=/portal(/|$$)(.*)
      - traefik.http.middlewares.portal.replacepathregex.replacement=/$${2}
      - traefik.http.routers.portal.middlewares=redirect@file
      - traefik.http.routers.portal_s.rule=Host(`${COOG_HOSTNAME}`) && PathPrefix(`/portal`)
      - traefik.http.routers.portal_s.middlewares=portal_s
      - traefik.http.middlewares.portal_s.replacepathregex.regex=/portal(/|$$)(.*)
      - traefik.http.middlewares.portal_s.replacepathregex.replacement=/$${2}
      - traefik.http.routers.portal_s.entrypoints=https
      - traefik.http.routers.portal_s.tls=true
      - traefik.http.routers.portal_s.tls.certresolver=letsencrypt

    networks:
      - frontend

  static:
    image: coopengo/static:${IMAGE_VERSION_STATIC}
    labels:
      - traefik.http.routers.static.rule=Host(`${COOG_HOSTNAME}`) && ( PathPrefix(`/sao`) || PathPrefix(`/doc`) || PathPrefix(`/bench`) )
      - traefik.http.routers.static.entrypoints=http
      - traefik.http.routers.static.middlewares=redirect@file
      - traefik.http.routers.static_s.rule=Host(`${COOG_HOSTNAME}`) && ( PathPrefix(`/sao`) || PathPrefix(`/doc`) || PathPrefix(`/bench`) )
      - traefik.http.routers.static_s.entrypoints=https
      - traefik.http.routers.static_s.tls=true
      - traefik.http.routers.static_s.tls.certresolver=letsencrypt
    networks:
      - frontend

  unoconv:
    image: coopengo/unoconv:${IMAGE_VERSION_UNOCONV}
    env_file:
      - env_files/var.env
    networks:
      - backend
